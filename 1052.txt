整体逻辑不复杂，但要注意划分字符串为字符储存时的细节，find函数从给定位置开始寻找字符串或字符的位置，找到则返回第一次出现的位置，未出现返回string::npos。
substr指定要提取的子串的起始位置和长度，长度默认为npos，即提取到字符串尾，若指定的长度超过字符串长度，也会提取到字符串尾。
#include<iostream>
#include<vector>
using namespace std;
vector<string> divideChars(const string& inputString){
    vector<string> symbols;
    size_t start=0;
    start=inputString.find('[',start);
    while(start!=string::npos){
        size_t end=inputString.find(']',start);
        if(end!=string::npos){
            symbols.push_back(inputString.substr(start+1,end-start-1));
            start=end+1;
            start=inputString.find('[',start);
        }
    }
    return symbols;
}
int main(){
    string handInput,eyeInput,mouthInput;
    getline(cin,handInput);
    getline(cin,eyeInput);
    getline(cin,mouthInput);
    vector<string> hands=divideChars(handInput);
    vector<string> eyes=divideChars(eyeInput);
    vector<string> mouths=divideChars(mouthInput);
    int k;
    cin>>k;
    int handLen=hands.size();
    int eyeLen=eyes.size();
    int mouthLen=mouths.size();
    for(int i=0;i<k;i++){
        int hand1,eye1,mouth,eye2,hand2;
        cin>>hand1>>eye1>>mouth>>eye2>>hand2;
        if(hand1<1||hand1>handLen||
          eye1<1||eye1>eyeLen||
          mouth<1||mouth>mouthLen||
          eye2<1||eye2>eyeLen||
          hand2<1||hand2>handLen)
            cout<<"Are you kidding me? @\\/@"<<endl;
        else{
            cout<<hands[hand1-1]<<"("<<
                eyes[eye1-1]<<mouths[mouth-1]<<
                eyes[eye2-1]<<")"<<hands[hand2-1]<<endl;
        }
    }
    return 0;
}
